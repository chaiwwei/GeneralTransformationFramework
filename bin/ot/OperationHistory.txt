package ot;

import com.VectorClock;

public class OperationHistory {
	private OTOperation head;
	private OTOperation tail;

	public OperationHistory() {
		this.tail = OTOperation.createEmptyOTOperation();
		this.head = OTOperation.createEmptyOTOperation();
		this.head.next = this.tail;
		this.tail.prev = this.head;
	}

	public void add(OTOperation op) {
		// System.out.println(op.toString());
		OTOperation cur = this.head.next;
		while (cur != this.tail) {
			if (op.totalOrder(cur) < 0) {
				break;
			}
			cur = cur.next;
		}
		op.next = cur;
		cur.prev.next = op;
		op.prev = cur.prev;
		cur.prev = op;

	}

	public void addLast(OTOperation op) {
		op.next = this.tail;
		this.tail.prev.next = op;
		op.prev = this.tail.prev;
		this.tail.prev = op;
	}

	public OTOperation first() {
		return this.head.next;
	}

	public boolean isLast(OTOperation op) {
		return op == this.tail;
	}

	public void clear(VectorClock minVC) {
		OTOperation cur = this.head.next;
		while (cur != this.tail) {
			if (cur.getSeq(cur.sid) <= minVC.get(cur.sid)) {
				cur.prev.next = cur.next;
				cur.next.prev = cur.prev;
			} else {
				break;
			}
			cur = cur.next;
		}
	}

	public int memorySize() {
		int num = 0;
		OTOperation cur = this.head.next;
		while (cur != this.tail) {
			num = num + 1;
			cur = cur.next;
		}
		return num;
	}
}